# run_sr.jl (Phi√™n b·∫£n s·ª≠a l·ªói MethodError v√† parallelism)

using SymbolicRegression
using DataFrames
using CSV
using Random

println("B·∫Øt ƒë·∫ßu script Symbolic Regression b·∫±ng Julia...")

# !!! QUAN TR·ªåNG: THAY ƒê·ªîI ƒê∆Ø·ªúNG D·∫™N N√ÄY CHO PH√ô H·ª¢P !!!
csv_filepath = joinpath(@__DIR__, "output_SR_results_julia", "C:\\Users\\MAY02\\Documents\\Physics_Symbolic_regression\\output_SR_results\\relax_Al_8line_1_processed.csv")
# csv_filepath = "C:/Users/MAY02/Documents/Physics_Symbolic_regression/output_SR_results_julia/data_for_julia_sr.csv" # V√ç D·ª§

target_column_name = "Temperature"

println("S·∫Ω t·∫£i d·ªØ li·ªáu t·ª´: ", csv_filepath)

try
    if !isfile(csv_filepath)
        println("L·ªñI: Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu CSV t·∫°i: '", csv_filepath, "'")
        exit()
    end

    df = CSV.read(csv_filepath, DataFrame)
    println("T·∫£i d·ªØ li·ªáu th√†nh c√¥ng. S·ªë d√≤ng ban ƒë·∫ßu: ", nrow(df), ", S·ªë c·ªôt: ", ncol(df))

    available_columns = names(df)
    println("C√°c c·ªôt c√≥ s·∫µn trong DataFrame v·ª´a ƒë·ªçc: ", available_columns)

    # println("\nKi·ªÉu d·ªØ li·ªáu ban ƒë·∫ßu c·ªßa c√°c c·ªôt:")
    # for col_name in available_columns
    #     println("C·ªôt '", col_name, "': ", eltype(df[!, Symbol(col_name)]))
    # end

    if nrow(df) == 0; println("L·ªñI: DataFrame r·ªóng sau khi t·∫£i."); exit(); end
    if !(target_column_name in available_columns); println("L·ªñI: C·ªôt target '", target_column_name, "' kh√¥ng t√¨m th·∫•y."); exit(); end

    # --- X·ª¨ L√ù MISSING V√Ä CHUY·ªÇN ƒê·ªîI KI·ªÇU D·ªÆ LI·ªÜU ---
    feature_column_names_str = [col for col in available_columns if col != target_column_name]
    if isempty(feature_column_names_str); println("L·ªñI: Kh√¥ng c√≥ c·ªôt feature n√†o."); exit(); end
    
    all_used_column_names_str = vcat(feature_column_names_str, target_column_name)
    all_used_column_symbols = Symbol.(all_used_column_names_str)
    # println("\nC√°c c·ªôt s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng cho SR: ", all_used_column_names_str)

    df_cleaned = dropmissing(df, all_used_column_symbols)
    rows_dropped = nrow(df) - nrow(df_cleaned)
    if rows_dropped > 0; println("ƒê√£ lo·∫°i b·ªè ", rows_dropped, " h√†ng do c√≥ gi√° tr·ªã missing."); end
    if nrow(df_cleaned) == 0; println("L·ªñI: DataFrame r·ªóng sau khi lo·∫°i b·ªè missing."); exit(); end
    println("S·ªë d√≤ng sau khi l√†m s·∫°ch missing: ", nrow(df_cleaned))

    local y_vec::Vector{Float64} # ƒê·ªïi t√™n ƒë·ªÉ r√µ r√†ng h∆°n v√† ƒë·∫£m b·∫£o l√† Vector
    local X_mat::Matrix{Float64} # ƒê·ªïi t√™n ƒë·ªÉ r√µ r√†ng h∆°n

    try
        y_temp_col = df_cleaned[!, Symbol(target_column_name)]
        y_vec = Vector{Float64}(y_temp_col)
    catch e
        println("L·ªñI khi chuy·ªÉn ƒë·ªïi c·ªôt target '$target_column_name' sang Vector{Float64}."); showerror(stdout, e); println(); exit()
    end

    feature_column_symbols_cleaned = Symbol.(feature_column_names_str)
    try
        num_features = length(feature_column_symbols_cleaned)
        num_samples_cleaned = nrow(df_cleaned)
        X_matrix_temp = Matrix{Float64}(undef, num_features, num_samples_cleaned)
        for (i, feature_sym) in enumerate(feature_column_symbols_cleaned)
            X_matrix_temp[i, :] = Vector{Float64}(df_cleaned[!, feature_sym])
        end
        X_mat = X_matrix_temp
    catch e
        println("L·ªñI khi chuy·ªÉn ƒë·ªïi c√°c c·ªôt feature sang Matrix{Float64}."); showerror(stdout, e); println(); exit()
    end
    
    # println("\nƒê√£ chuy·ªÉn ƒë·ªïi X v√† y sang ki·ªÉu d·ªØ li·ªáu c·ª• th·ªÉ (Float64).")
    # println("Ki·ªÉu d·ªØ li·ªáu c·ªßa y_vec: ", eltype(y_vec), ", k√≠ch th∆∞·ªõc: ", size(y_vec))
    # println("Ki·ªÉu d·ªØ li·ªáu c·ªßa X_mat: ", eltype(X_mat), ", k√≠ch th∆∞·ªõc (features, samples): ", size(X_mat))

    if size(X_mat,2) != length(y_vec) || length(y_vec) == 0; println("L·ªñI: D·ªØ li·ªáu X_mat ho·∫∑c y_vec kh√¥ng h·ª£p l·ªá sau khi x·ª≠ l√Ω."); exit(); end

    # --- 2. Thi·∫øt l·∫≠p T√πy ch·ªçn cho Symbolic Regression ---
    println("\nThi·∫øt l·∫≠p c√°c t√πy ch·ªçn cho Symbolic Regression...")
    custom_square(x) = x^2
    custom_cube(x) = x^3
    options = Options(
        binary_operators=[+, -, *, /, ^],
        unary_operators=[cos, sin, exp, log, sqrt, abs, tanh, inv, custom_square, custom_cube],
        verbosity=1, # Ho·∫∑c 0 ƒë·ªÉ √≠t log h∆°n, 2 ƒë·ªÉ nhi·ªÅu h∆°n
        progress=true,
        populations=100,
        parsimony=0.0032, # Th·ª≠ nghi·ªám v·ªõi gi√° tr·ªã n√†y
    )

    var_names_for_search = feature_column_names_str
    println("S·ª≠ d·ª•ng t√™n bi·∫øn cho EquationSearch: ", var_names_for_search)

    # --- 3. Ch·∫°y Symbolic Regression (ƒê√É S·ª¨A) ---
    println("\nB·∫Øt ƒë·∫ßu qu√° tr√¨nh t√¨m ki·∫øm ph∆∞∆°ng tr√¨nh (EquationSearch)...")
    niterations = 20 

    Random.seed!(42)

    # --- DEBUG: Ki·ªÉm tra ki·ªÉu v√† k√≠ch th∆∞·ªõc c·ªßa X_mat v√† y_vec ngay tr∆∞·ªõc khi g·ªçi EquationSearch ---
    println("Tr∆∞·ªõc EquationSearch - Ki·ªÉu X_mat: ", typeof(X_mat), ", K√≠ch th∆∞·ªõc X_mat: ", size(X_mat))
    println("Tr∆∞·ªõc EquationSearch - Ki·ªÉu y_vec: ", typeof(y_vec), ", K√≠ch th∆∞·ªõc y_vec: ", size(y_vec))
    # --- K·∫æT TH√öC DEBUG ---

    hall_of_fame = EquationSearch(
        X_mat, y_vec, # S·ª≠ d·ª•ng X_mat v√† y_vec ƒë√£ ƒë∆∞·ª£c ƒë·∫£m b·∫£o ki·ªÉu
        niterations=niterations,
        options=options,
        variable_names=var_names_for_search,
        parallelism=:serial # S·ª≠ d·ª•ng :serial ƒë·ªÉ ch·∫°y tu·∫ßn t·ª± v√† tr√°nh l·ªói lu·ªìng.
                            # N·∫øu mu·ªën ƒëa lu·ªìng, ch·∫°y julia --threads auto symbolic.jl v√† ƒë·∫∑t parallelism=:multithreading
    )
    println("\n‚úÖ Ho√†n th√†nh EquationSearch.")

    # --- 4. Hi·ªÉn th·ªã v√† L∆∞u K·∫øt qu·∫£ ---
    # (Gi·ªØ nguy√™n ph·∫ßn n√†y nh∆∞ code ƒë·∫ßy ƒë·ªß tr∆∞·ªõc ƒë√≥, ƒë·∫£m b·∫£o s·ª≠ d·ª•ng hall_of_fame)
    println("\nC√°c ph∆∞∆°ng tr√¨nh trong Hall of Fame (Pareto frontier):")
    pareto_frontier_df = dominating_pareto_frontier(hall_of_fame)

    if nrow(pareto_frontier_df) > 0
        for i in 1:nrow(pareto_frontier_df)
            eq_row = pareto_frontier_df[i, :]
            score_str = "score" in names(eq_row) ? "| Score: $(round(eq_row.score, digits=5))" : ""
            println("Equation ", i, ": ", eq_row.equation,
                    " | Loss: ", round(eq_row.loss, digits=5),
                    " | Complexity: ", eq_row.complexity,
                    " $score_str")
        end

        best_overall_eq_row = pareto_frontier_df[1, :] 
        if "score" in names(pareto_frontier_df) && nrow(pareto_frontier_df) > 0
            sorted_by_score_df = sort(pareto_frontier_df, :score, rev=true)
            if nrow(sorted_by_score_df) > 0; best_overall_eq_row = sorted_by_score_df[1, :]; end
        elseif nrow(pareto_frontier_df) > 0 
             best_overall_eq_row = pareto_frontier_df[argmin(pareto_frontier_df.loss), :]
        end

        println("\n--- Ph∆∞∆°ng tr√¨nh t·ªët nh·∫•t ƒë∆∞·ª£c ch·ªçn ---")
        println("Equation: ", best_overall_eq_row.equation)
        println("Loss: ", best_overall_eq_row.loss)
        println("Complexity: ", best_overall_eq_row.complexity)
        if "score" in names(best_overall_eq_row); println("Score: ", best_overall_eq_row.score); end

        output_dir_julia = dirname(csv_filepath) 
        output_file_julia_results = joinpath(output_dir_julia, "best_symbolic_expression_julia_full_v4.txt") # ƒê·ªïi t√™n file output
        try
            open(output_file_julia_results, "w") do f
                write(f, "C√°c ph∆∞∆°ng tr√¨nh trong Pareto Frontier (SymbolicRegression.jl):\n")
                for i in 1:nrow(pareto_frontier_df)
                    eq_row = pareto_frontier_df[i, :]
                    score_str = "score" in names(eq_row) ? "| Score: $(round(eq_row.score, digits=5))" : ""
                    write(f, "Eq $i: $(eq_row.equation) | Loss: $(round(eq_row.loss, digits=5)) | Complexity: $(eq_row.complexity) $score_str\n")
                end
                write(f, "\n--- Ph∆∞∆°ng tr√¨nh t·ªët nh·∫•t ƒë∆∞·ª£c ch·ªçn ---\n")
                write(f, "Equation: $(best_overall_eq_row.equation)\n")
                # ... (ghi c√°c th√¥ng tin kh√°c nh∆∞ tr∆∞·ªõc)
            end
            println("\nüìÑ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: ", output_file_julia_results)
        catch e_file; println("L·ªñI khi ghi file k·∫øt qu·∫£: ", e_file); end
    else
        println("\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng tr√¨nh n√†o trong Hall of Fame.")
    end

catch e
    println("\nƒê√É X·∫¢Y RA L·ªñI TRONG QU√Å TR√åNH CH·∫†Y SCRIPT JULIA:")
    showerror(stdout, e)
    println()
    # current_exceptions_stack = Base.catch_stack()
    # if !isempty(current_exceptions_stack); println("\n--- Backtrace ---"); for (exc, bt) in current_exceptions_stack; showerror(stdout, exc, bt); println(stdout); end; end
end

println("\nüèÅ Script Julia ho√†n th√†nh.")